namespace (num){
    import lib/nat_num.set;
};

namespace (tuple){
    import lib/tuple.set;
};

def S(X){
    left = tuple.left(X);
    temp = S(left);
    return <temp, tuple.right(X)>;
};

def pred(X){
    right = tuple.right(X);
    temp = S(right);
    return <tuple.left(X), temp>;
};

def add(X, Y){
    left = num.add(tuple.left(X),tuple.left(Y));
    right = num.add(tuple.right(X),tuple.right(Y));
    return <left, right>;
};

def mul(X, Y){
    X_l = tuple.left(X);
    X_r = tuple.right(X);
    Y_l = tuple.left(X);
    Y_r = tuple.right(X);

    left = num.add(num.mul(X_l, Y_l), num.mul(X_r, Y_r));
    right = num.add(num.mul(X_l, Y_r), num.mul(X_r, Y_l));
    return <left, right>;
};

def normalize(X){
    a = X.left(X);
    b = X.right(X);

    if (a == b){
        return <num.zero(), num.zero()>;
    }else{};
    if (num.lt(a, b)){
        return <num.zero(), num.subtract(b, a)>;
    }else{};
    if (num.gt(a, b)){
        return <num.subtract(a, b), num.zero()>;
    }else{};
};

def equals(X, Y){
    return normalize(X) == normalize(Y);
};

def sign(X){
    return num.lt(tuple.left(X), tuple.right(X));
};

def one(){
    return S(zero());
};

def zero(){
    return <num.zero(), num.zero()>;
};